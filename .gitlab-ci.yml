image: node:10.5.0-alpine
stages:
  - test
  - test
  - deploy
before_script:
  - echo 'Using Node.js version' $(node -v)
  - echo 'Using npm version' $(npm -v)

test:
  stage: test
  variables:
    APP_ENV: "test"
    NODE_ENV: "test"
    CODACY_PROJECT_TOKEN: $CODACY_PROJECT_TOKEN
  script:
    - npm ci
    - npm test
    - cat ./coverage/lcov.info | ./node_modules/.bin/codacy-coverage -t $CODACY_PROJECT_TOKEN -v -c $CI_COMMIT_SHA

dependency_scanning:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]

sast:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]

pages: # the job must be named pages
  stage: deploy
  script:
    - npm ci
    - npm run build
    - mv storybook-dist public
  artifacts:
    paths:
      - public
  environment:
      name: production
  only:
    - tags

publish:
  stage: deploy
  script:
    - echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
    - npm publish --access public
  only:
    - tags
